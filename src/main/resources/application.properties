spring.application.name=BCDonaciones
#spring.datasource.url=jdbc:mysql://localhost:3306/tfg_db
#spring.datasource.url=jdbc:mysql://host.docker.internal:3306/tfg_db
#spring.datasource.url=jdbc:mysql://172.25.144.51:3306/tfg_db

#spring.datasource.url=jdbc:mysql://172.22.0.5:3306/tfg_db
spring.datasource.url=jdbc:mysql://localhost:3306/tfg_db
#spring.datasource.url=jdbc:mysql://tfg-mariadb:3306/tfg_db

spring.datasource.username=tfg_user
spring.datasource.password=tfg_password
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.hikari.data-source-properties.useSSL=false
spring.datasource.hikari.data-source-properties.verifyServerCertificate=false
spring.datasource.hikari.data-source-properties.requireSSL=false

# Configuracion de Hibernate (JPA)
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true

spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.initialization-fail-timeout=5000


springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

jwt.secret=MBqrXbdihyWbAXVuWszJ4o7VlztVH9AjQ4Y3NXBGU+U
security.jwt.expiration-time=86400000

app.jwtExpirationMs = 3600000        # 1 hora para el JWT de acceso
app.jwtRefreshExpirationMs = 86400000  # 24 horas para el refresh token

# Ruta completa al archivo del truststore (en WSL, usa la ruta de Linux)
fabric.truststore.path=/home/rafa/fabric-truststore.jks
fabric.truststore.password=changeit

# Ruta completa al Connection Profile
#fabric.connection.profile=/mnt/c/Users/rafag/hyperledger-fabric/fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/connection-org1.yaml
fabric.connection.profile=classpath:fabric/connection-org1.yaml


logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG

-Djavax.net.ssl.trustStore=/usr/lib/jvm/java-17-openjdk-amd64/lib/security/cacerts
-Djavax.net.ssl.trustStorePassword=changeit


spring.security.oauth2.client.registration.google.client-id=268951654032-b174e8v4dni1abuns1i14o2rslup2qjj.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo


# Necesario para que Spring no bloquee sesiones entre puertos
server.servlet.session.cookie.same-site=lax
server.servlet.session.cookie.secure=true


fabric.cert.path=classpath:fabric/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem
fabric.key.path=classpath:fabric/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore/priv_sk


# Ruta al certificado TLS del peer
fabric.peer.tlsCert=classpath:fabric/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt

# Ruta al certificado TLS del orderer
fabric.orderer.tlsCert=classpath:fabric/connection-org1/orderer-tls/ca.crt